usersApp.directive('strongPassRequired', function () {
    var isValid = function(s) {
        return s && /\D/.test(s) && /\d/.test(s);
    };
    return {
        require:'ngModel',
        link:function (scope, elm, attrs, ngModelCtrl) {
            ngModelCtrl.$parsers.unshift(function (viewValue) {
                ngModelCtrl.$setValidity('strongPass', isValid(viewValue));
                return viewValue;
            });
            ngModelCtrl.$formatters.unshift(function (modelValue) {
                ngModelCtrl.$setValidity('strongPass', isValid(modelValue));
                return modelValue;
            });
        }
    };
});
usersApp.directive('telValidation', function () {
    var isValid = function(s) {
        return s && /^[ 0-9]+$/.test(s);
    };
    return {
        require:'ngModel',
        link:function (scope, elm, attrs, ngModelCtrl) {
            ngModelCtrl.$parsers.unshift(function (viewValue) {
                ngModelCtrl.$setValidity('correctNumber', isValid(viewValue));
                return viewValue;
            });
            ngModelCtrl.$formatters.unshift(function (modelValue) {
                ngModelCtrl.$setValidity('correctNumber', isValid(modelValue));
                return modelValue;
            });
        }
    };
});
usersApp.directive('nameValidation', function () {
    var isValid = function(s) {
        return s && /^[a-zA-Z\s]+$/.test(s) || /^[А-Яа-яЁё\s]+$/.test(s);
    };
    return {
        require:'ngModel',
        link:function (scope, elm, attrs, ngModelCtrl) {
            ngModelCtrl.$parsers.unshift(function (viewValue) {
                ngModelCtrl.$setValidity('realName', isValid(viewValue));
                return viewValue;
            });
            ngModelCtrl.$formatters.unshift(function (modelValue) {
                ngModelCtrl.$setValidity('realName', isValid(modelValue));
                return modelValue;
            });
        }
    };
});
usersApp.directive('loginValidation', function () {
    var isValid = function(s) {
        return s && /^[a-zA-Z0-9]*$/.test(s);
    };
    return {
        require:'ngModel',
        link:function (scope, elm, attrs, ngModelCtrl) {
            ngModelCtrl.$parsers.unshift(function (viewValue) {
                ngModelCtrl.$setValidity('correctLogin', isValid(viewValue));
                return viewValue;
            });
            ngModelCtrl.$formatters.unshift(function (modelValue) {
                ngModelCtrl.$setValidity('correctLogin', isValid(modelValue));
                return modelValue;
            });
        }
    };
});